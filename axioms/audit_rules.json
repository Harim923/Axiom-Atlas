{
  "meta": {
    "version": "0.1",
    "description": "Formalizer Self-Audit Rules – v0.1 (counting, geometry, optimization, algebra)",
    "domains": [
      "counting",
      "geometry",
      "optimization",
      "algebra"
    ],
    "author": "Formalizer Core",
    "created": "2025-04-23"
  },
  "rules": [
    {
      "id": "AUDIT_ENUM_EXHAUST",
      "domain": "counting",
      "type": "checklist",
      "description": "Enumeration must be explicitly declared as exhaustive.",
      "trigger_if_missing": [
        "all possible cases",
        "no other possibilities",
        "cases are mutually exclusive and complete",
        "exhaustive"
      ],
      "fail_message": "Enumeration may be incomplete. No explicit coverage statement found."
    },
    {
      "id": "AUDIT_DUP_OVERCOUNT",
      "domain": "counting",
      "type": "overcount_guard",
      "description": "Warn if arrangements with duplicates lack overcount correction.",
      "triggers": [
        "arrange",
        "permute",
        "rearrange"
      ],
      "requires_one_of": [
        "divide by",
        "multiset",
        "inclusion-exclusion"
      ],
      "fail_message": "Overcount likely; no correction seen."
    },
    {
      "id": "AUDIT_DUPLICATE_ADDITION",
      "domain": "counting",
      "type": "addition_guard",
      "description": "When combining cases, verify that overlap is not counted twice.",
      "triggers": [
        "add",
        "sum",
        "together",
        "combine",
        "cases"
      ],
      "requires_disjoint_mention": [
        "disjoint",
        "mutually exclusive",
        "no overlap",
        "each case is counted once"
      ],
      "fail_message": "Cases are combined by addition but no disjointness or overlap mention was found."
    },
    {
      "id": "AUDIT_COMPLEMENT_CORRECTNESS",
      "domain": "counting",
      "type": "complement_guard",
      "description": "Ensure that complementary counting is applied correctly when required.",
      "triggers": [
        "at least",
        "at most",
        "not"
      ],
      "requires_one_of": [
        "complement",
        "1 -",
        "total -"
      ],
      "fail_message": "Complement case may not have been correctly calculated."
    },
    {
      "id": "AUDIT_GOAL_ALIGNMENT",
      "domain": "counting",
      "type": "goal_alignment",
      "description": "Ensure that the final quantity computed matches the quantity asked in the problem.",
      "requires_consistency": true,
      "check_fields": [
        "quantity type",
        "final expression"
      ],
      "fail_message": "Final computation may not match what the problem asked."
    },
    {
      "id": "AUDIT_APPROX_WHEN_EXACT",
      "domain": "counting",
      "type": "precision_guard",
      "description": "Warn if approximate reasoning is used where exact computation is possible.",
      "triggers": [
        "approximately",
        "roughly",
        "about",
        "likely near"
      ],
      "context_flags": {
        "exact_computation_possible": true
      },
      "fail_message": "Approximate language used when exact computation was possible."
    },
    {
      "id": "AUDIT_ARITH_ERROR",
      "domain": "counting",
      "type": "arithmetic_guard",
      "description": "Check for basic arithmetic mistakes in the final result.",
      "target": "Final Result",
      "check": "symbolic_evaluation",
      "fail_message": "Final result may contain an arithmetic mistake (e.g., incorrect multiplication or addition)."
    },
    {
      "id": "AUDIT_GEO_LENGTH_METHOD",
      "domain": "geometry",
      "type": "length_derivation_check",
      "description": "When a length is computed, verify that it was derived from a valid method such as Pythagorean theorem, Law of Cosines, Law of Sines, or proportionality.",
      "triggers": [
        "length of",
        "find the length",
        "distance between"
      ],
      "requires_one_of": [
        "Pythagorean",
        "right triangle",
        "a^2 + b^2 = c^2",
        "cosine rule",
        "sine rule",
        "proportional triangles",
        "ratio of similarity",
        "coordinate distance formula"
      ],
      "fail_message": "Length computed without citing a valid derivation method (e.g., Pythagoras, cosine law, proportion, or coordinate distance)."
    },
    {
      "id": "AUDIT_GEO_ANGLE_CHAINING",
      "domain": "geometry",
      "type": "angle_logic_check",
      "description": "Check that any inferred angle values follow from logical angle chasing.",
      "triggers": [
        "angle",
        "∠",
        "degree"
      ],
      "requires_one_of": [
        "angle chasing",
        "∠ABC + ∠CBD =",
        "angles in triangle sum to 180",
        "isosceles triangle",
        "cyclic quadrilateral",
        "opposite angles",
        "alternate interior angles"
      ],
      "fail_message": "Angle computed without clear logical chaining (angle chasing or known identities missing)."
    },
    {
      "id": "AUDIT_GEO_COORDINATE_ESCAPE",
      "domain": "geometry",
      "type": "method_shift_check",
      "description": "If plane geometry is insufficient, confirm that a coordinate-based approach was applied.",
      "triggers": [
        "not enough angles",
        "no clear triangle",
        "hard to construct",
        "geometry too messy"
      ],
      "requires_one_of": [
        "assign coordinates",
        "let A = (x, y)",
        "bashing",
        "coordinate method",
        "area via determinant"
      ],
      "fail_message": "Geometry was not solvable directly, but no coordinate-based method was used."
    },
    {
      "id": "AUDIT_GEO_COORDINATE_MISREAD",
      "domain": "geometry",
      "type": "coordinate_interpretation_check",
      "description": "When coordinates were used, check whether geometric relationships were interpreted correctly.",
      "triggers": [
        "assign coordinates",
        "placed on plane",
        "let A = (x, y)"
      ],
      "requires_one_of": [
        "distance formula",
        "dot product",
        "area via determinant",
        "midpoint formula",
        "slope",
        "direction vector"
      ],
      "fail_message": "Coordinates used but geometric reasoning may not align with correct interpretation (e.g., misused slope, distance)."
    },
    {
      "id": "AUDIT_GEO_SHAPE_PROPERTIES_MISSING",
      "domain": "geometry",
      "type": "definition_application_check",
      "description": "Warn if a shape (square, parallelogram, etc.) is mentioned but its defining properties are not used.",
      "triggers": [
        "square",
        "rhombus",
        "parallelogram",
        "isosceles",
        "equilateral"
      ],
      "requires_one_of": [
        "equal sides",
        "perpendicular",
        "diagonals",
        "opposite angles equal",
        "angle = 90"
      ],
      "fail_message": "Named shape was not followed by application of defining geometric properties."
    },
    {
      "id": "AUDIT_GEO_CIRCLE_THEOREM_MISSING",
      "domain": "geometry",
      "type": "circle_reasoning_guard",
      "description": "Warn if a circle or intersection is mentioned, but no cyclic/PoP reasoning is used.",
      "triggers": [
        "circle",
        "diameter",
        "point on circle",
        "intersect"
      ],
      "requires_one_of": [
        "cyclic quadrilateral",
        "opposite angles",
        "power of a point",
        "angle in semicircle"
      ],
      "fail_message": "Circle mentioned but no cyclic or PoP-based logic applied."
    },
    {
      "id": "AUDIT_GEO_CIRCLE_THEOREM_MISSING",
      "domain": "geometry",
      "type": "circle_reasoning_guard",
      "triggers": [
        "circle",
        "diameter",
        "point on circle"
      ],
      "requires_one_of": [
        "cyclic quadrilateral",
        "power of a point",
        "angle in semicircle"
      ],
      "fail_message": "Circle mentioned but no cyclic or PoP logic applied."
    },
    {
      "id": "AUDIT_GEO_TRIANGLE_EXISTENCE",
      "domain": "geometry",
      "type": "existence_constraint_check",
      "description": "Verify that a triangle being referenced is actually constructible and non-degenerate.",
      "triggers": [
        "triangle",
        "△"
      ],
      "requires_one_of": [
        "non-collinear",
        "triangle inequality",
        "area > 0"
      ],
      "fail_message": "Triangle mentioned without condition for existence (e.g., triangle inequality or non-collinearity)."
    },
  {
      "id": "AUDIT_MAX_MIN_EARLY_STOP",
      "domain": "optimization",
      "type": "iteration_guard",
      "description": "Warn if a maximum or minimum is chosen before all relevant cases are tested or ruled out.",
      "triggers": [
        "maximize",
        "maximum",
        "minimize",
        "minimum",
        "find the greatest",
        "find the least"
      ],
      "anti_patterns": [
        "seems optimal",
        "probably highest",
        "appears to be max",
        "let's assume",
        "likely the best"
      ],
      "requires_one_of": [
        "checked all",
        "compared each",
        "tested all possible values",
        "iterated",
        "enumerated completely"
      ],
      "fail_message": "Maximum or minimum claimed before all cases were tested or ruled out."
    },
    {
      "id": "AUDIT_ALG_QUADRATIC_USAGE",
      "domain": "algebra",
      "type": "formula_application_check",
      "description": "Check whether the quadratic formula was used appropriately (only for ax² + bx + c = 0).",
      "triggers": [
        "quadratic formula",
        "x = (-b ±"
      ],
      "requires_one_of": [
        "ax^2 + bx + c = 0",
        "standard form"
      ],
      "fail_message": "Quadratic formula applied without verifying equation is in standard quadratic form."
    },
    {
      "id": "AUDIT_ALG_CUBIC_OR_HIGHER",
      "domain": "algebra",
      "type": "degree_guard",
      "description": "Warn if cubic or higher degree equation is simplified without factoring or proper method.",
      "triggers": [
        "x^3",
        "cubic",
        "quartic",
        "degree 3",
        "degree 4"
      ],
      "requires_one_of": [
        "factor",
        "Rational Root Theorem",
        "graph",
        "descartes",
        "substitute"
      ],
      "fail_message": "Higher-degree equation was handled without a valid solving strategy."
    },
    {
      "id": "AUDIT_ALG_MANIPULATION_INACCURATE",
      "domain": "algebra",
      "type": "symbolic_step_check",
      "description": "Check for mistakes in basic expansion, factoring, or rearrangement steps.",
      "triggers": [
        "expand",
        "simplify",
        "rearrange",
        "distribute",
        "combine like terms"
      ],
      "fail_message": "Algebraic manipulation step may contain expansion/factoring/simplification errors."
    },
    {
      "id": "AUDIT_ALG_SUBSTITUTION_LOGIC",
      "domain": "algebra",
      "type": "substitution_chain_guard",
      "description": "Ensure that variable substitution is logically sound and properly reverted if temporary.",
      "triggers": [
        "let",
        "substitute",
        "u = x + 1",
        "temporary variable"
      ],
      "requires_one_of": [
        "solve for original variable",
        "substitute back",
        "undo substitution"
      ],
      "fail_message": "Variable substitution used without showing how it connects back to the original equation."
    },
    {
      "id": "AUDIT_ALG_FRACTION_NOT_SIMPLIFIED",
      "domain": "algebra",
      "type": "simplification_check",
      "description": "If the answer must be expressed as a reduced fraction, ensure m/n is in lowest terms.",
      "triggers": [
        "expressed as m/n",
        "relatively prime",
        "reduced fraction",
        "in lowest terms"
      ],
      "requires_one_of": [
        "gcd(m,n)=1",
        "cannot be simplified",
        "already reduced",
        "no common factor"
      ],
      "fail_message": "Final fraction may not be in lowest terms despite problem requiring a reduced fraction."
    },
    {
      "id": "AUDIT_ALG_INEQUALITY_FLIP",
      "domain": "algebra",
      "type": "inequality_direction_check",
      "description": "Ensure inequalities are flipped correctly when multiplying/dividing by negative numbers.",
      "triggers": [
        "inequality",
        "<",
        ">",
        "≤",
        "≥"
      ],
      "requires_one_of": [
        "flip the inequality",
        "reverse the sign",
        "multiplied by negative"
      ],
      "fail_message": "Inequality may have been simplified without reversing the direction when required."
    },
    {
      "id": "AUDIT_ALG_QUADRATIC_MISSING_RADICAL",
      "domain": "algebra",
      "type": "formula_component_check",
      "description": "Check that the quadratic formula includes the ±√(b² - 4ac) term.",
      "triggers": [
        "quadratic formula",
        "x ="
      ],
      "requires_one_of": [
        "±",
        "sqrt",
        "discriminant"
      ],
      "fail_message": "Quadratic formula missing radical term (±√b² - 4ac)."
    },
    {
      "id": "AUDIT_ALG_EXPAND_WHEN_FACTORED_BETTER",
      "domain": "algebra",
      "type": "prefer_factor_form",
      "description": "Prefer to keep polynomial in factored form if the problem asks for roots or zero values.",
      "triggers": [
        "expand",
        "multiply",
        "distribute"
      ],
      "context_flags": {
        "goal": "find zeros"
      },
      "fail_message": "Expanded polynomial instead of keeping in factored form for root-finding."
    },
    {
      "id": "AUDIT_ALG_SERIES_FORMULA_MISUSED",
      "domain": "algebra",
      "type": "series_formula_check",
      "description": "Ensure correct usage of arithmetic/geometric series formulas.",
      "triggers": [
        "sum",
        "add from 1 to n",
        "sequence",
        "1 + 2 + ... + n"
      ],
      "requires_one_of": [
        "n(n+1)/2",
        "a(1 - r^n)/(1 - r)",
        "common difference",
        "first term"
      ],
      "fail_message": "Sum formula applied without correct structure or parameter justification."
    }
  ]
}
