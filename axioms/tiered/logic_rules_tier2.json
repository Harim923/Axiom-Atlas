{
  "logic_rules": [
    {
      "id": "LR_STRUCTURAL_EQUIV_MSET",
      "type": "logic_rule",
      "level": "tier2",
      "applies_to": ["combinatorics"],
      "statement": "Multisets with the same integer counts up to permutation are structurally equivalent and must be counted only once.",
      "example": "(1,1,5), (1,5,1), and (5,1,1) all represent the same multiset partition structure."
    },
    {
      "id": "LR_CASE_EXHAUSTION_REQUIRED",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "All mutually exclusive exhaustive cases must be considered in enumerative reasoning. Partial case consideration may lead to undercounting.",
      "example": "If splitting by even/odd or coprime/non-coprime, all branches must be checked."
    },
    {
      "id": "LR_SYMMETRIC_PAIRS_COLLAPSE",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "Symmetric pairs such as (a, b) and (b, a) must be counted only once when the context is unordered.",
      "example": "(1,2) and (2,1) represent the same outcome if order doesn't matter."
    },
    {
      "id": "LR_BASIC_ARITHMETIC_ALLOWED",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "Trivial arithmetic involving integers and basic fractions (addition, subtraction, multiplication, division) is permitted during reasoning.",
      "example": "Formalizer may simplify 2 + 3 = 5 or 6 / 3 = 2 without explicit justification."
    },
    {
      "id": "LR_PRECONDITION_CHECK_REQUIRED",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "In conditional reasoning, all preconditions must be explicitly checked before applying subsequent steps.",
      "example": "If a step depends on x > 0, this must be shown or assumed before using it."
    },
    {
      "id": "LR_MODUS_PONENS",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "If 'If A then B' and 'A' are both known, then B can be concluded.",
      "example": "From A => B and A, infer B."
    },
    {
      "id": "LR_INTEGER_PARTITION_COLLAPSE",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "Integer partitions that are permutations of each other must be considered as one case when counting structurally distinct configurations.",
      "example": "[2,2,3] and [3,2,2] count as one case in integer partition reasoning."
    },
    {
      "id": "LR_CASE_COUNT_EQ_SUM_SUBCASES",
      "type": "logic_rule",
      "level": "tier2",
      "statement": "If a total count is partitioned into mutually exclusive subcases, the total equals the sum of the subcases.",
      "example": "Total = Case A + Case B + Case C, where A, B, C are disjoint."
    },
    {
    "id": "LR_SORT1",
    "type": "logic_rule",
    "level": "tier2",
    "statement": "If an element is stated to be the last in a sorted list, then all other elements must come before it in the sort order.",
    "example": "If GL is the last pair in alphabetical order, then all other pairs like AB, CJ, or EK must precede GL alphabetically."
  },
  {
    "id": "LR_SORT2",
    "type": "logic_rule",
    "level": "tier2",
    "statement": "If elements are grouped and then sorted, the relative position of any element depends on the lexical comparison of all groupings.",
    "example": "In a list of word pairs, the position of GH depends on the alphabetical order of GH compared to all other pairs."
  },
  {
    "id": "LR_SORT3",
    "type": "logic_rule",
    "level": "tier2",
    "statement": "If a particular item must appear at the end of a sorted list, then no other item may be lexicographically greater than it.",
    "example": "If 'GI' is the last word, then pairs like 'GJ', 'GL', or 'JK' must not be present since they would sort after 'GI'."
  },
  {
    "id": "LR_SORT4",
    "type": "logic_rule",
    "level": "tier2",
    "statement": "If a specific letter must appear in the last word of a sorted list, it must be paired such that the resulting pair is greater than all other pairs.",
    "example": "To ensure G appears in the last word, it must be paired with a letter like L, not with H, unless all other words are smaller than GH."
  },
  {
    "id": "LR_SORT5",
    "type": "logic_rule",
    "level": "tier2",
    "statement": "When combinations are alphabetically sorted, the lexicographical dominance of a pair depends not only on its letters but also on the absence of higher-ranked pairs.",
    "example": "Even if GH is a valid pair, it is not the last unless all other pairs sort before it. GK or GL could push GH earlier in order."
  },
  {
  "id": "LR_SORT6",
  "type": "logic_rule",
  "level": "tier2",
  "statement": "If a specific pair must be the last in a lexicographically sorted list, all other pairs must be lexicographically smaller than it.",
  "example": "To count the number of pairings where GL is the last word, one must ensure that no other pair in the list alphabetically follows GL."
  },
  {
  "id": "LR_EXPECTED_INTERSECTIONS_GIVEN_CONSTRAINTS",
  "type": "logic_rule",
  "level": "tier2",
  "statement": "When segments are drawn with geometric constraints (e.g., between specific sectors or quadrants), the expected number of intersections must reflect those constraints, not use uniform random approximation blindly.",
  "tags": ["expected value", "geometric probability", "intersection"]
  },
  {
  "id": "LR_VALUATION_EXP",
  "type": "logic_rule",
  "level": "tier2",
  "statement": "The p-adic valuation of x^n is n times the valuation of x.",
  "example": "If v₃(x) = 2, then v₃(x^3) = 6."
  },
  {
  "id": "LR_LTE_ODD_CASE",
  "type": "logic_rule",
  "level": "tier2",
  "statement": "If p is an odd prime, p divides (x + y), and p does not divide x or y, then v_p(x^n + y^n) = v_p(x + y) + v_p(n), provided n is odd.",
  "example": "If x + y ≡ 0 mod 3 and 3 ∤ x, y, then v₃(x^3 + y^3) = v₃(x + y) + v₃(3) = v₃(x + y) + 1."
  },
  {
  "id": "LR_VALUATION_ADD_REDUCTION",
  "type": "logic_rule",
  "level": "tier2",
  "statement": "If all terms a^3, b^3, c^3 are divisible by p^k, then a^3 + b^3 + c^3 ≡ 0 mod p^k if and only if the sum of the reduced terms is zero modulo p^{k - m}, where m = min(v_p(a^3), v_p(b^3), v_p(c^3)).",
  "example": "If v₃(a) = v₃(b) = v₃(c) = 2, then a^3 + b^3 + c^3 ≡ 0 mod 3^7 ⇔ a'^3 + b'^3 + c'^3 ≡ 0 mod 3."
  }
  ]
}
